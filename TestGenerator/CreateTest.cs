using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestGenerator
{
    public class CreateTest
    {
        /// <summary>
        /// Create a class from scratch.
        /// </summary>
        string CreateClass(TypeContext context)
        {
            // Create CompilationUnitSyntax
            var syntaxFactory = SyntaxFactory.CompilationUnit();

            // Add System using statement: (using  Microsoft.VisualStudio.TestTools.UnitTesting)
            syntaxFactory = syntaxFactory.AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Microsoft.VisualStudio.TestTools.UnitTesting")));
            syntaxFactory = syntaxFactory.AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(context.Namespace)));

            // Create a namespace
            var @namespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(context.Namespace+".Test")).NormalizeWhitespace();

            //  Create a class
            var classDeclaration = SyntaxFactory.ClassDeclaration(context.Type+"Test");

            var classAttr = SyntaxFactory.SingletonSeparatedList(SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestClass()")).NormalizeWhitespace());
            // Add the public modifier
            classDeclaration = classDeclaration.AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                                               .AddAttributeLists(SyntaxFactory.AttributeList(classAttr));

            // Create a stament with the body of a method.
            var syntax = SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");");
            var attribute = SyntaxFactory.AttributeList(SyntaxFactory.SingletonSeparatedList(
                        SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestMethod()")))
                    ).NormalizeWhitespace();

            foreach (var method in context.Methods)
            {
                // Create a method
                var methodDeclaration = SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName("void"), method + "Test")
                    .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                    .WithBody(SyntaxFactory.Block(syntax))
                    .AddAttributeLists(attribute);

                // Add the field, the property and method to the class.
                classDeclaration = classDeclaration.AddMembers(methodDeclaration);
            }
            

            // Add the class to the namespace.
            @namespace = @namespace.AddMembers(classDeclaration);

            // Add the namespace to the compilation unit.
            syntaxFactory = syntaxFactory.AddMembers(@namespace);

            // Normalize and get code as string.
            var code = syntaxFactory
                .NormalizeWhitespace()
                .ToFullString();
            return code;
        }
    }
}